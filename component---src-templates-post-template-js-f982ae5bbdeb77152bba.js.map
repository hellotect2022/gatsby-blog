{"version":3,"file":"component---src-templates-post-template-js-f982ae5bbdeb77152bba.js","mappings":"+OAIA,MAAMA,GAAe,gJAUfC,GAAkB,QAAQC,IAC9B,QAAC,EAAAC,GAAW,UAAKD,EAAK,CAAEE,MAAO,CAAEC,SAAU,gBAC5C,oBAFuB,CAEtB,gJAsBF,MAVgB,YAEZ,IAFsB,UACxBC,GACD,EACC,OACE,QAACN,EAAe,MACd,QAACC,EAAe,CAACM,MAAOD,EAAWE,IAAI,cAG7C,ECjCA,MAAMC,GAAgB,g+BAgItB,MAJmB,YAAqB,IAAX,KAAEC,GAAM,EACnC,OAAO,QAACD,EAAgB,CAACE,wBAAyB,CAAEC,OAAQF,IAC9D,EC7HA,MAIMG,GAAiB,wGAkCvB,MA5BsB,WACpB,MAAMC,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,KACR,GAAwB,OAApBF,EAAQG,QAAkB,OAE9B,MAAMC,EAAaC,SAASC,cAAc,UAEpCC,EAAa,CACjBC,IAnBM,gCAoBNC,KAnBO,kCAoBP,aAAc,WACdC,MAAO,UACPC,MAAM,eACNC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQ,IAAmB,IAAjBC,EAAKC,GAAM,EAC9Cd,EAAWe,aAAaF,EAAKC,EAAM,IAGrClB,EAAQG,QAAQiB,YAAYhB,EAAW,GACtC,KAEI,QAACL,EAAiB,CAACsB,IAAKrB,GACjC,ECEA,MAnCoB,YAIhB,IAHAsB,MACIC,mBAAmB,MAAEC,KAE5B,EACG,MACIC,MAAM,KACJ7B,EACA8B,aAAa,MACXC,EAAK,QACLC,EAAO,KACPC,EAAI,WACJC,EACAtC,WACEuC,iBAAiB,gBAAEC,OAIvBR,EAAM,GAEd,OACE,QAACS,EAAA,EAAQ,MACL,QAAC,EAAQ,CACTN,MAAOA,EACPE,KAAMA,EACNC,WAAYA,EACZtC,UAAWwC,KAEb,QAAC,EAAW,CAACpC,KAAMA,KACnB,QAAC,EAAa,MAIpB,C","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHead.js","webpack://gatsby-starter-default/./src/components/Post/PostContent.js","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.js","webpack://gatsby-starter-default/./src/templates/post_template.js"],"sourcesContent":["import React from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\r\n\r\nconst PostHeadWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 400px;\r\n\r\n  @media (max-width: 768px) {\r\n    height: 300px;\r\n  }\r\n`\r\n\r\nconst BackgroundImage = styled((props) => (\r\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\r\n))`\r\nz-index: -1;\r\nwidth: 100%;\r\nheight: 400px;\r\nobject-fit: cover;\r\nfilter: brightness(0.25);\r\n\r\n@media (max-width: 768px) {\r\n  height: 300px;\r\n}\r\n`\r\n\r\nconst PostHead= function ({\r\n  thumbnail,\r\n}) {\r\n  return (\r\n    <PostHeadWrapper>\r\n      <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\r\n    </PostHeadWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHead","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst MarkdownRenderer = styled.div`\r\n  // Renderer Style\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 768px;\r\n  margin: 0 auto;\r\n  padding: 100px 0;\r\n  word-break: break-all;\r\n\r\n  // Markdown Style\r\n  line-height: 1.8;\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n\r\n  // Apply Padding Attribute to All Elements\r\n  p {\r\n    padding: 3px 0;\r\n  }\r\n\r\n  // Adjust Heading Element Style\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    font-weight: 800;\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  * + h1,\r\n  * + h2,\r\n  * + h3 {\r\n    margin-top: 80px;\r\n  }\r\n\r\n  hr + h1,\r\n  hr + h2,\r\n  hr + h3 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 30px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 25px;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 20px;\r\n  }\r\n\r\n  // Adjust Quotation Element Style\r\n  blockquote {\r\n    margin: 30px 0;\r\n    padding: 5px 15px;\r\n    border-left: 2px solid #000000;\r\n    font-weight: 800;\r\n  }\r\n\r\n  // Adjust List Element Style\r\n  ol,\r\n  ul {\r\n    margin-left: 20px;\r\n    padding: 30px 0;\r\n  }\r\n\r\n  // Adjust Horizontal Rule style\r\n  hr {\r\n    border: 1px solid #000000;\r\n    margin: 100px 0;\r\n  }\r\n\r\n  // Adjust Link Element Style\r\n  a {\r\n    color: #4263eb;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  // Adjust Code Style\r\n  pre[class*='language-'] {\r\n    margin: 30px 0;\r\n    padding: 15px;\r\n    font-size: 15px;\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n      background: rgba(255, 255, 255, 0.5);\r\n      border-radius: 3px;\r\n    }\r\n  }\r\n\r\n  code[class*='language-'],\r\n  pre[class*='language-'] {\r\n    tab-size: 2;\r\n  }\r\n\r\n  // Markdown Responsive Design\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 80px 20px;\r\n    line-height: 1.6;\r\n    font-size: 14px;\r\n\r\n    h1 {\r\n      font-size: 23px;\r\n    }\r\n\r\n    h2 {\r\n      font-size: 20px;\r\n    }\r\n\r\n    h3 {\r\n      font-size: 17px;\r\n    }\r\n\r\n    img {\r\n      width: 100%;\r\n    }\r\n\r\n    hr {\r\n      margin: 50px 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst PostContent= function ({ html }) {\r\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\r\n}\r\n\r\nexport default PostContent","import styled from '@emotion/styled'\r\nimport React, { createRef, useEffect } from 'react'\r\n\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\nconst repo = '[username]/[username].github.io' // 자신 계정의 레포지토리로 설정\r\n\r\n\r\nconst UtterancesWrapper = styled.div`\r\n  @media (max-width: 768px) {\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\nconst CommentWidget = function () {\r\n  const element = createRef()\r\n\r\n  useEffect(() => {\r\n    if (element.current === null) return\r\n\r\n    const utterances = document.createElement('script')\r\n\r\n    const attributes = {\r\n      src,\r\n      repo,\r\n      'issue-term': 'pathname',\r\n      label: 'Comment',\r\n      theme: `github-light`,\r\n      crossorigin: 'anonymous',\r\n      async: 'true',\r\n    }\r\n\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      utterances.setAttribute(key, value)\r\n    })\r\n\r\n    element.current.appendChild(utterances)\r\n  }, [])\r\n\r\n  return <UtterancesWrapper ref={element} />\r\n}\r\n\r\nexport default CommentWidget","import React from 'react'\r\nimport Template from '../components/Common/Template'\r\nimport PostHead from '../components/Post/PostHead'\r\nimport { graphql } from 'gatsby'\r\nimport PostContent from '../components/Post/PostContent'\r\nimport CommentWidget from '../components/Post/CommentWidget'\r\n\r\nconst PostTemplate= function ({\r\n    data: {\r\n        allMarkdownRemark: { edges },\r\n      },\r\n}) {\r\n    const {\r\n        node: {\r\n          html,\r\n          frontmatter: {\r\n            title,\r\n            summary, // 나중에 사용할 예정입니다!\r\n            date,\r\n            categories,\r\n            thumbnail: {\r\n              childImageSharp: { gatsbyImageData },\r\n            },\r\n          },\r\n        },\r\n      } = edges[0]\r\n\r\n  return (\r\n    <Template>\r\n        <PostHead\r\n        title={title}\r\n        date={date}\r\n        categories={categories}\r\n        thumbnail={gatsbyImageData}\r\n      />\r\n      <PostContent html={html} />\r\n      <CommentWidget />\r\n    </Template>\r\n\r\n  )\r\n}\r\n\r\nexport default PostTemplate\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"names":["PostHeadWrapper","BackgroundImage","props","G","style","position","thumbnail","image","alt","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","data","allMarkdownRemark","edges","node","frontmatter","title","summary","date","categories","childImageSharp","gatsbyImageData","Template"],"sourceRoot":""}